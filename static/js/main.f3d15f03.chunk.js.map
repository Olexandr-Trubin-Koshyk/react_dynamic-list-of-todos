{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectUser","selectedUserId","useState","query","setQuery","todosStatus","setTodosStatus","filteredTodos","filter","todo","completed","title","includes","className","type","placeholder","value","onChange","event","target","map","defaultChecked","readOnly","onClick","userId","id","API_URL_USERS","CurrentUser","clearUser","selectedUser","setSelectedUser","useEffect","fetch","then","response","json","getSelectedUser","user","name","email","phone","App","setSelectedUserId","selectedTodos","setSelectedTodos","showTodos","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3d15f03.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Todo } from '../../types';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n  selectedUserId: number;\n}\n\nexport const TodoList = React.memo<Props>(\n  ({\n    todos,\n    selectUser,\n    selectedUserId,\n  }) => {\n    const [query, setQuery] = useState('');\n    const [todosStatus, setTodosStatus] = useState('all');\n\n    const getFilteredTodos = () => {\n      return todos.filter(todo => {\n        switch (todosStatus) {\n          case 'active':\n            return !todo.completed && todo.title.includes(query);\n          case 'completed':\n            return todo.completed && todo.title.includes(query);\n          default:\n            return todo.title.includes(query);\n        }\n      });\n    };\n\n    const filteredTodos = getFilteredTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__filter-menu\">\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            placeholder=\"Begin typing for search\"\n            value={query}\n            onChange={(event) => setQuery(event.target.value)}\n          />\n          <select\n            className=\"TodoList__select\"\n            onChange={(event) => setTodosStatus(event.target.value)}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos\n              .map(todo => (\n                <li\n                  className={\n                    `TodoList__item\n                    ${todo.completed\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked'}`\n                  }\n                  key={todo.id}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      defaultChecked={todo.completed}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    onClick={() => selectUser(todo.userId)}\n                    className={`\n                      button\n                      TodoList__user-button\n                      ${selectedUserId === todo.userId\n                        && 'TodoList__user-button--selected'}\n                    `}\n                    type=\"button\"\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n);\n","import { Todo, User } from '../types';\n\nconst API_URL_TODOS = 'https://mate.academy/students-api/todos';\n\nconst API_URL_USERS = 'https://mate.academy/students-api/users/';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(API_URL_TODOS)\n    .then(response => response.json());\n}\n\nexport function getAllUsers(): Promise<User[]> {\n  return fetch(API_URL_USERS)\n    .then(response => response.json());\n}\n\nexport function getSelectedUser(userId:number): Promise<User> {\n  return fetch(`${API_URL_USERS}${userId}`).then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\nimport { getSelectedUser } from '../../api/api';\nimport { User } from '../../types';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  clearUser: () => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getSelectedUser(userId)\n      .then(user => setSelectedUser(user));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {selectedUser\n        && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${selectedUser.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n            <button\n              type=\"button\"\n              onClick={() => clearUser()}\n            >\n              Clear\n            </button>\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\nimport { Todo } from './types';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const [selectedTodos, setSelectedTodos] = useState<Todo[]>([]);\n\n  const showTodos = () => (\n    getAllTodos()\n      .then(data => (\n        setSelectedTodos(data)\n      ))\n  );\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const clearCurrentUser = () => {\n    setSelectedUserId(0);\n  };\n\n  useEffect(() => {\n    showTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={selectedTodos}\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearCurrentUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}